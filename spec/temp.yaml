openapi: 3.0.2
info:
    version: '1.0'
    title: 'OpenAPI Course'
    description: Specification for OpenAPI Course
    termsOfService: http://example.com/terms/
    contact:
        name: John Thompson
        url: https://springframework.guru
        email: john@springframework.guru
    license:
        name: Apache 2.0
        url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
    - url: https://dev.example.com
      description: Development Server
    - url: https://qa.example.com
      description: QA Server
    - url: https://prod.example.com
      description: Production Server
paths:
    /v1/customers:
        get:
            summary: List Customers
            description: Get a list of customers in the system
            tags:
                -  Customers
            operationId: listCustomersV1
            parameters:
                - $ref: "#/components/parameters/PageNumberParam"
                - $ref: "#/components/parameters/PageSizeParam"
            responses:
                '200':
                    description: List of Customers
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CustomerPagedList"
        post:
            summary: New Customer
            description: Create a new customer
            tags:
                - Customers
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Customer"
            responses:
                '201':
                    description: Customer Created
                    headers:
                        Location:
                            description: Location of the created customer
                            schema:
                                type: string
                                format: uri
                                example: http://example.com/v1/customers/{assignedIdValue}
    /v1/customers/{customerId}:
        get:
            summary: Get Customer By ID
            description: Get a single **Customer** by its Id value.
            tags:
                -  Customers
            operationId: getCustomerByIdV1
            parameters:
                - name: customerId
                  in: path
                  description: Customer Id
                  required: true
                  schema:
                      type: string
                      format: uuid
            responses:
                '200':
                    description: Found Customer
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Customer"
    /v1/beers:
        get:
            summary: List Beers
            description: List all beers in system.
            tags:
                -  Beers
            operationId: listBeersV1
            parameters:
                - $ref: "#/components/parameters/PageNumberParam"
                - $ref: "#/components/parameters/PageSizeParam"
            responses:
                '200':
                    description: List of Beers
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BeerPagedList"
                '404':
                    description: No Beers Found
    /v1/beers/{beerId}:
        get:
            summary: Get Beer by ID
            description: Get a single beer by its ID value.
            tags:
                -  Beers
            operationId: getBeerByIdV1
            parameters:
                - name: beerId
                  in: path
                  description: Beer Id
                  required: true
                  schema:
                      type: string
                      format: uuid
            responses:
                '200':
                    description: Found Beer by Id
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Beer"
components:
    parameters:
        PageNumberParam:
            name: pageNumber
            in: query
            description: Page Number
            required: false
            schema:
                type: integer
                format: int32
                default: 1
        PageSizeParam:
            name: pageSize
            in: query
            description: Page Size
            required: false
            schema:
                type: integer
                format: int32
                default: 25
    schemas:
        Address:
            type: object
            properties:
                line1:
                    type: string
                    example: 123 main
                city:
                    type: string
                    example: St Pete
                stateCode:
                    type: string
                    minLength: 2
                    maxLength: 2
                    description: 2 Letter State Code
                    # enum: [AL, AK, AZ, AR, CA]
                    enum:
                        - AL
                        - AK
                        - AZ
                        - AR
                        - CA
                zipCode:
                    type: string
                    example: 33701
        Customer:
            type: object
            description: customer object
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                firstName:
                    type: string
                    minLength: 2
                    maxLength: 100
                    example: John
                lastName:
                    type: string
                    minLength: 2
                    maxLength: 100
                    example: Thompson
                address:
                    $ref: "#/components/schemas/Address"
        CustomerList:
            type: array
            minItems: 1
            maxItems: 100
            description: List of Customers
            items:
                $ref: "#/components/schemas/Customer"
        CustomerPagedList:
            type: object
            allOf:
                - $ref: "#/components/schemas/PagedResponse"
            properties:
                content:
                    $ref: "#/components/schemas/CustomerList"
        Brewery:
            type: object
            properties:
                name:
                    type: string
                location:
                    type: string
        Beer:
            type: object
            description: Beer Object
            properties:
                beerName:
                    type: string
                style:
                    type: string
                    enum: [ALE, PALE_ALE, IPA, WHEAT, LAGER]
                price:
                    type: number
                    format: float
                quantityOnHand:
                    type: integer
                    format: int32
                brewery:
                    $ref: "#/components/schemas/Brewery"
        BeerList:
            type: array
            items:
                $ref: "#/components/schemas/Beer"
        BeerPagedList:
            type: object
            allOf:
                - $ref: "#/components/schemas/PagedResponse"
            properties:
                content:
                    $ref:  "#/components/schemas/BeerList"
        PagedResponse:
            type: object
            properties:
                pageable:
                    type: object
                    properties:
                        sort:
                            type: object
                            properties:
                                sorted:
                                    type: boolean
                                unsorted:
                                    type: boolean
                        offset:
                            type: integer
                            format: int32
                        pageNumber:
                            type: integer
                            format: int32
                        pageSize:
                            type: integer
                            format: int32
                        paged:
                            type: boolean
                        unpaged:
                            type: boolean
                totalPages:
                    type: integer
                    format: int32
                last:
                    type: boolean
                totalElements:
                    type: integer
                    format: int32
                size:
                    type: integer
                    format: int32
                number:
                    type: integer
                    format: int32
                numberOfElements:
                    type: integer
                    format: int32
                sort:
                    type: object
                    properties:
                        sorted:
                            type: boolean
                        unsorted:
                            type: boolean
                first:
                    type: boolean